#+TITLE: Notes on: Artificial Intelligent Programming by Charniak, E., Riesbeck, C. K., McDermott, D. V., & Meehan, J. R. (1987)
#+Time-stamp: <2021-06-10 16:20:43 boxx>

- source :: cite:charniak-1987-artif-intel-progr

* TODO Summary

* TODO Comments

* TODO Topics

** Data Structures

Lisp data structures are called /S-expressions/, where the /S/ stands for /symbolic/. In this text, the terms /S-expression/ and /expression/ are used interchangeably. An S-expression is

  1. a /number/, e.g., ~15~, written as an optional plus or minus sign, followed by one or more digits.
  2. a /symbol/, e.g., ~FOO~, written as a letter followed by zero or more letters or digits.
  3. a /string/, e.g., ~"This is a string"~, written as a double quote, followed by zero or more characters, followed by another double quote.
  4. a /character/, e.g., ~#\9~, written as a sharp sign, followed by a backslash, followed by a character. (Numbers, symbols, strings, and characters are called /atoms/. There are other kinds of /atoms/ that we will see in later chapters.)
  5. a /list/ of S-expressions, e.g., ~(A B)~ or ~(IS TALL (FATHER BILL))~, written as a left parenthesis, followed by zero or more S-expressions, followed by a right parenthesis.

Parentheses are more significant in Lisp than they are in most other programming languages. Parentheses are virtually the only punctuation marks available in Lisp programs. They are used to indicate the structure of S-expressions. For example, ~(A)~ is a list of one element, the symbol ~A~. ~((A))~ is also a list of one element, which is in turn a list of one element, which is the symbol ~A~. Notice also that the left and right parentheses /must balance/. That is, a well-formed S-expression has a right parenthesis to close off each left parenthesis.

** Program Structures

*Syntax*: The syntax of a Lisp program is simple ... /every/ S-expression is a /syntactically/ legal program *(!)* That is, any given data structure could be executed as a program. Most of them, however, fail on /semantic/ grounds *(!)*

*Semantics*: The function that executes S-expressions (and hence defines the semantics of Lisp) is called ~EVAL~. ~EVAL~ takes one S-expression and returns another S-expression. The second S-expression is called the /value/ of the first expression. We notate this as /expression/ \Rightarrow /value/.

The rules for evaluation are fairly simple.

  - *Rule 1*: If the expression is a /number/, a /string/, a /character/, the symbol ~T~, or the symbol ~NIL~, then its value is itself. So ~5~ \Rightarrow 5.
  - *Rule 2*: If the expression is a /list/ of the form ~(/function arg_{1} ... arg_{k}/)~ then the value is found by first evaluating each argument ~(/arg_{1}/ to arg_{k}~), and then calling /function/ with these values. For the moment, all our functions are named by symbols. For example, the symbols ~+~ (for addition) and ~*~ (for multiplication) name functions that are defined in Lisp for doing arithmetic.
  - *Rule 3*: If the expression is a /list/ of the form ~(/reserved-word arg_{1} ... arg_{k}/)~ then the value depends completely *(!)* on the definition of /reserved-word/. Reserved words are named by symbols, just as functions are. One such reserved word is ~SETQ~. ~SETQ~ is used for assigning values to symbols. ~(SETQ /symbol expression/)~ causes /symbol/ to be "bound to" (or "set to" or "assigned") the value of /expression/. The value of /expression/ is returned as the value of the ~SETQ~ (i.e., the value that the SETQ-expression produces).
  - *Rule 4*: If the expression is a /symbol/, then its value is the last value that has been assigned to it. If no value has been assigned, then an error occurs. So if ~X~ is bound to 16, ~X~ \Rightarrow 16.

These are the four (4) rules employed by the ~EVAL~, which is part of the Lisp interpreter. The interpreter is a program that you run. You type an S-expression and it prints back another S-expression. This second S-expression is the value of the one you typed in. (Or, if something goes wrong, an error message is printed instead of a value).

Lisp programs don't always need to be compiled like Algol or Fortran progams. That is, you do not have to take a file of Lisp text, convert it into internal machine code, and then run the machine code. Instead, you can type Lisp text to the interpreter, which evaluates it and types the result back to you as more Lisp text.

While interpreting means that a program runs slower, it also usually means that you always have your expressions available during execution for inspection and modification. Lisp can support very powerful debugging and editing facilities for this reason *(!)*

The "top-level" loop of the Lisp interpreter can be written in an Algol-like language as

#+begin_example
BEGIN
LOOP: EVAL := READ (INPUT);
      VAL := EVAL (EXP);
      PRINT (VAL, OUTPUT);
      GO TO LOOP
END;
#+end_example

This is usually referred to as the ~READ-EVAL-PRINT~ loop. All three functions are avilable to the user - that is, when you write a function that uses the Lisp functions ~READ~, ~EVAL~, or ~PRINT~, you are calling the same machine code that the interpreter uses in the ~READ-EVAL-PRINT~ loop.

The function ~READ~ reads one S-expression. It knows about balanced parentheses and the spaces that terminate numbers and atoms. It takes one argument, a /stream/, which is a Lisp object that indicates the source of the input.

The function ~EVAL~ applied the four rules of evaluation to its argument and returns a new S-expression unless an error occurs, in which case an error message is printed.

The function ~PRINT~ takes two arguments: an S-expression, which it prints, and a stream, which indicates where the output should be sent. Internally, Lisp stores everything as machine addresses *(!)*, not as character strings. The functions ~READ~ and ~PRINT~ are responsible for converting strings with letters, numbers, spaces, and parentheses into list structures and back again *(!)*. It is important to realize that what you type and what Lisp reads are character strings, *not* Lisp lists.

For example, every time you type the name of a Lisp function like ~PRINT~, you want it to refer to the same internal machine code for printing. The function ~READ~ is responsible for taking the characters ~P~, ~R~, ~I~, ~N~, and ~T~ and converting them into a reference to a unique address. We will see shortly several other jobs that ~READ~ does.

The fact that the interpreter reads what you type and prints back its value explains why very few of the functions we define have any explicit input/output references. In Lisp, almost everything is done by passing values between functions, including *(!)* communication from the user to the interpreter and back.

Furthermore, in Lisp, you do *not* define a "main program" with subroutines. Instead *(!)* you define a set of functions. One of them may be the only one that you intend to call explicitly at the top level of Lisp, but this does not rule out calling any of the others if you want to. All functions are equal in the sight of the Lisp interpreter *(!)*.

Learning Lisp is a matter of learning the reserved words and built-in functions, plus the appropriate programming techniques. A list of the reserved words and functions needed for this book appear in the glossary.

When we describe the various functions and reserved words, we need an informal notation for giving the syntax of the Lisp expressions they are called with. The following conventions are used:

  1. Any word in lowercase italics stands for an arbitrary Lisp expression which can be substituted where the word appears. Usually the word suggests what kind of expressions can be used (e.g., /atom/ or /expression/).
  2. Anything that is enclosed in braces and followed by an asterisk stands for zero or more occurrences of that thing, separated by spaces (e.g., {/atom/}*).
  3. Items enclosed in braces and separated by a vertical bar indicate a choice. For example, { FLET | LABELS } means "either FLET or LABELS."
  4. Anything else is exactly what should appear in the Lisp expression.

Here is an example of what a Lisp expression looks like. It is also a valid Lisp program.

#+name: fig-1-1
#+begin_src lisp
      (LET ((SUM 0))
        (LOOP (IF (EQUAL N 0) (RETURN SUM))
              (SETQ SUM (+ SUM N))
              (SETQ N (- N 1))))
#+end_src

The ~READ~ function ignores extra spaces and ends of lines. Therefore, you can (and should) break up expressions over several lines, with a great deal of indentation to set things off, in order to make it easier for you and other programmers to read. There are special printing functions that do this for you automatically.

The program /fig-1-1/ adds up the integers from 1 to N. The /reserved words/ used are ~LET~, ~LOOP~, ~IF~, ~RETURN~, and ~SETQ~. The /functions/ used are ~EQUAL~, ~+~, and ~\minus~.

LET-expressions are treated like ~BEGIN/END~ blocks in Algol. The first expression after the ~LET~ symbol is a list of pairs (2-element lists). The first item in each pair is a symbol that names a local variable, and the second item is the initial value assigned to that variable. The previous values assigned to these variables are saved. When the evaluation of the ~LET~ is finished, these previous values are restored, and whatever values were assigned during the evaluation of the ~LET~ are lost.

In this case, the only local variable is ~SUM~. It is bound to 0 when the ~LET~ is entered, and re-bound to its previous value when the ~LET~ is exited. If it didn't have a previous value, then we say that it was previously "unbound", meaning that it had no value at all, and it becomes unbound once again after exiting the ~LET~.

The rest of the expressions in a ~LET~ are called the "body" of the ~LET~. They are normal Lisp expressions, and they are evaluated in order. The value of the last of these expressions becomes the value of the ~LET~.

In our example, there is only one Lisp expression in the body. It's a LOOP-expression. ~LOOP~ is another reserved word, *not* a function. The expressions inside the ~LOOP~ are evaluated in order. After the last expression is evaluated, they are all evaluated again, and again, forever. The only way out of a ~LOOP~ is to call ~RETURN~.

The first expression inside this ~LOOP~ is an "if-then" statement, also known as a conditional. Its general form looks like this:

( IF  /test/  /consequent/  /alternate/ )

/Test/, /consequent/, and /alternate/ are Lisp expressions: the /alternate/ is optional; there isn't one in our example, for instance.

Notice that the if-then-else form in Lisp returns a value; in many programming languages, it does not.

/False/ in Lisp is represented by the symbol ~NIL~. /True/ is represented in Lisp by *anything* that is not ~NIL~. Hence, 1, ~FOO~, and ~(A B C)~ are all /true/. The symbol ~T~ is commonly used to represent /true/. For example, ~(EQUAL N 0)~ returns ~T~ if N equals 0, and ~NIL~ otherwise.

~RETURN~ is a reserved word. It evaluates its argument (~SUM~ in our example), and then, instead of following the normal rules for evaluation, it breaks out of the nearest ~LOOP~; the value of its argument becomes the value of that LOOP-expression.

So if N is zero, then the value of ~SUM~ is immediately reutrned as the value of the ~LOOP~. Since that's the last (and only!) expression inside the LET-expression, it also becomes the value that the LET-expression returns.

The other expression in the ~LOOP~ should look familiar by now. We increase the value of ~SUM~ by ~N~, and decrease the value of ~N~ by 1. Then because we're in a ~LOOP~, we start over again with the IF-statement. Eventually, ~N~ will be zero, and ~SUM~ will be returned.

The program /fig-1-2/ shows another way of writing the same program.

#+name: fig-1-2
#+begin_src lisp
      (LET ((SUM 0))
        (LOOP (COND ((EQUAL N 0) (RETURN SUM))
                    (T (SETQ SUM (+ SUM N))
                       (SETQ N (- N 1))))))
#+end_src

In this version, we use a different form of conditional expression, ~COND~. ~COND~ is a very elegant construct. Each list inside the ~COND~ is called a COND-clause. The first element of each COND-clause is a /test/. The /tests/ are evaluated in order until one evaluates to /true/, then the expressions in the rest of that test's clause are evaluated. The value of the last of those expressions is returned as the value of the whole COND-expression, and the other clauses are bypassed.

The last test in a ~COND~ is often just ~T~. Since ~T~ is always /true/, this means that if the ~COND~ reaches the last branch, that branch will be taken. Thus the ~T~ serves the role of "else" in the conditional *(!)*.

We have shown that there are two ways to do a sequence of operations in Lisp. We have just looked at ~LET~ and ~LOOP~, which allow us to evaluate expressions in a linear sequence. Earlier we noted that because the evaluation procedure itself was *(!)* recursive *(!)*, evaluating the arguments of one function call could lead to evaluating other function calls.

For example, the normal Lisp way of writing the ~READ-EVAL-PRINT~ loop of the Lisp interpreter would be

#+begin_src lisp
  (LOOP(PRINT (EVAL (READ *STANDARD-INPUT*))
              *STANDARD-OUTPUT*))
#+end_src

Notice that the evaluation is from outside to inside, but that in order to evaluate the ~PRINT~, Lisp first has to evaluate the call to ~EVAL~, and that in order to evaluate that, Lisp first has to evaluate the call to ~READ~. Hence, the actual order of execution becomes ~READ~, then ~EVAL~, and finally ~PRINT~.

** Primitive Operations on S-Expressions

Our first example operated on numbers the way any other language would. Lisp is, however, mainly designed for performing symbolic manipulations *(!)*. Its most important functions are those that apply to symbolic expressions.

Two central functions are ~CAR~ and ~CDR~. ~CAR~ takes a list of and returns the first element of that list. ~CDR~ takes a list and returns the rest of the list minus *(!)* the first element. In some other languages having list structures, ~CAR~ and ~CDR~ are called ~HEAD~ and ~TAIL~, respectively.

With ~CAR~ and ~CDR~ we can get at /any/ subpart of a list structure. For example, by taking the ~CDR~ of a list, followed by the ~CAR~ of the result, we get the second element of the original list. By taking two CDRs and then a CAR, we get the third element, and so on.

Assume we have the list ~(A B C)~. We immediately run into a problem if we try to apply ~CAR~ or ~CDR~ to this list. Suppose we try writing the following:

~(CAR (A B C))~

Compare this with the form

~(+ (* 3 5) 2)~

Remember that in evaluating the ~+~ expression, Lisp first evaluated the ~*~ subexpression. The same thing happens with the ~CAR~ expression. Lisp first tries to evaluate the subexpression ~(A B C)~. Lisp assumes that any atom at the head of a list that is /not/ known to be a reserved word /must/ be a function *(!)*. Therefore, by *Rule 2*, it tries to apply the function ~A~ to the values of the symbols ~B~ and ~C~. This is *not* what we want. We want ~(A B C)~ to be left alone.

To do this, we use the reserved word ~QUOTE~. ~QUOTE~ returns its one argument unevaluated. That is, (QUOTE /expression/) \Rightarrow /expression/.

Since ~QUOTE~ turns out to be a very commonly needed function. Lisp provides an abbreviation. An expression of the form ~'exp~ is transformed by the function ~READ~ into (QUOTE /exp/). Thus to get the list ~(A B C)~ we can use either

(QUOTE (A B C))

or

'(A B C)

To get pieces of the list, we write

~(CAR (QUOTE (A B C)))~         \Rightarrow  ~A~
~(CDR (QUOTE (A B C)))~         \Rightarrow  ~(B C)~
~(CAR (CDR (QUOTE (A B C))))~   \Rightarrow  ~B~

What happens if we take the ~CDR~ of a list of one element? Watch!

~(CDR (QUOTE (A)))~  \Rightarrow ~()~

The ~CDR~ of a list that has one element is the empty list, which resonably enough is written as ~()~. In Lisp the empty list ~()~ is the value of the symbol ~NIL~. Thus, ~NIL~ stands for the empty list as well as /false/ *(!)*.

Given ~CAR~ and ~CDR~, we can write a ~LOOP~ analogous to our first one, that sums up the numbers in a list /L/ of numbers.

#+name: fig-1-4
#+begin_src lisp
      (LET ((SUM 0))
        (LOOP (IF (EQUAL L NIL) (RETURN SUM))
           (SETQ SUM (+ SUM (CAR L)))
           (SETQ L (CDR L))))
#+end_src

If /L/ were assigned the value ~(1 2 3 4)~, then this expression would return the value 10.

So far we have seen how we can decompose a list using ~CAR~ and ~CDR~. Of course, lists have to be built up as well as taken apart. To build them, we use the function ~CONS~. ~(CONS x l)~ creates a new lists with /x/ as the first element followed by the elements of /l/.

For example,

~(CONS (QUOTE A) (QUOTE (B C)))~   \Rightarrow  ~(A B C)~
~(CONS (QUOTE B) NIL)~             \Rightarrow  ~(B)~

What happens if we ~CONS~ an atom onto another atom (besides ~NIL~, which represents the empty list)?

(CONS 'A 'B) \Rightarrow (A . B)

This is called a /dotted pair/. Dotted pairs are actually the fundamental data structures of Lisp, but we delay describing them until later, in the section called /Inside Lisp/.

Note that for any non-empty list, the following identity holds

(CONS (CAR /list/) (CDR /list/))  =  /list/

There are two other very handy functions for building lists: ~APPEND~ and ~LIST~. ~APPEND~ takes two or more arguments, all of which should be lists (empty lists are allowed), and returns a list built from the elements of each list. ~LIST~ takes one or more arguments and makes a list with them as elements.

** Tree Structures

We now explore several common cases involving the decomposition and rebuilding of Lisp data structures.

Consider the class of Lisp arithmetic expressions:

  1. A number is an arithmetic expression.
  2. If /exp1/ and /exp2/ are arithmetic expressions, then (+ /exp1/ /exp2/) is an arithmetic expression.
  3. If /exp1/ and /exp2/ are arithemtic expressions, then (* /exp1/ /exp2/) is an arithmetic expression.

Now suppose that we wanted a function that would compute the value of an arbitrary arithmetic expression. We define a new Lisp function ~COMPUTE~ to do this. It takes a Lisp arithmetic expression and computes its value. Obviously, ~COMPUTE~ is imitating the behavior of ~EVAL~.

A definition of ~COMPUTE~ is given below.

#+name: fig-1-5
#+begin_src lisp
       (DEFUN COMPUTE (AE)
              (COND ((NUMBERP AE) AE)
                    ((EQUAL (CAR AE) '+)
                     (+ (COMPUTE (CAR (CDR (AE))))))
                    ((EQUAL (CAR AE) '*)
                     (* (COMPUTE (CAR (CDR AE)))
                        (COMPUTE (CAR (CDR (CDR AE))))))))
#+end_src

The Lisp function ~NUMBERP~ returns /true/ if its argument is a number, and /false/ otherwise.

The reserved word ~DEFUN~ is used to define new functions. In this case, we are defining a function names ~COMPUTE~ that takes one argument. The symbol ~AE~ will be bound to that argument when the function is called. The rest of the definition is an expression giving the value of ~COMPUTE~. This expression is a COND-form.

In general, DEFUN-expressions are written like this:

(DEFUN /name/ ({/symbol/}*) {/expression/}*)

This defines /name/ as a function with the symbols as the names of the function's local variables (also called *formal variables*), and a function body made up of the expressions. The result of calling /name/ with a set of arguments is found by binding the values of the arguments to the local variables, evaluating the expressions of the function body in order, and returning the value of the last expression evaluated.

In the definition of ~COMPUTE~, notice that each clause of the ~COND~ exactly mirrors each clause of the recursive definition of /arithmetic expression/. The first clause tests whether ~AE~ is a number. If it is, then the value of the arithmetic expression is just that number.

The second clause checks the ~CAR~ of the expression to see whether it is the symbol ~+~. If it is, then the value of the whole expression is the sum of the values computed for the two subexpressions: ~(CAR (CDR AE))~, which is the second element of ~AE~, and ~(CAR (CDR (CDR AE)))~, which is the third.

~*~ is handled like ~+~, except that the two subexpressions are multiplied.

At this point it becomes relevant to introduce two more abbreviations. It is somewhat tiresome to have to write ~(CAR (CDR (CDR ... )))~, so Lisp allows you to abbreviate such expressions by just writing ~(CADDR ...)~. In general, ~CxxxxR~ may be used, where the x's are replaced with A's and D's. (In most versions of Lisp, at most four A's and D's may be written.) The most interesting part of ~COMPUTE~ is its use of /recursion/. Many people have trouble grasping recursion at first. It helps to realize that recursive procedures are most often applied to recursively defined data structures that are to be decomposed. If you can grasp the data-structure definition, the program to operate on it will be clear.

This example is also a demonstration of how easy it is to write language interpreters in Lisp. In this case, of course, the language being defined is a subset of Lisp itself, but this need not always be the case. It is not uncommon in Lisp to have programs which operate on other Lisp programs, as we shall see.

** Lists

We can formally define the notion of a /list/ as follows:

  1. ~NIL~ is a list.
  2. If /expression/ is an expression and /list/ is a list, then the result of (CONS /expression/ /list/) is a list.

Since this is a recursive definition, it is natural to think of using recursion when doing operations on lists *(!)*. For example, the following snippet of code defines the function ~SQUARE-LIST~ which takes a list of numbers and returns a list of their squares.

#+name: fig-1-6
#+begin_src lisp
    (DEFUN SQUARE-LIST (L)
      (COND ((NULL L) NIL)
            (T (CONS (SQUARE (CAR L))
                     (SQUARE-LIST (CDR L))))))

    (DEFUN SQUARE (N) (* N N))
#+end_src

(NULL /expression/) is equivalent to (EQUAL /expression/ NIL).

In ~SQUARE-LIST~, the first element of the list ~L~ is squared and put on the front of the list obtained by applying ~SQUARE-LIST~ to the rest of ~L~. For example, (SQUARE-LIST '(2 3)) leads to the following chain of evaluation:

(SQUARE-LIST '(2 3))
=  (CONS (SQUARE 2) (SQUARE-LIST '(3)))
=  (CONS 4 (CONS (SQUARE 3) (SQUARE-LIST NIL)))
=  (CONS 4 (CONS 9 NIL))
\Rightarrow (4 9)

In the definition of ~SQUARE-LIST~, there is one COND-clause for each clause of the recursive definition of lists. If the list ~L~ is empty then the list of its squares is empty, too. Otherwise, the list of squares is obtained by CONSing the square of the first element onto the squares of the rest of the elements.

The function ~SQUARE-LIST~ takes a list and transforms it into a list of equal length. It is just as easy to write a function that selects some of the elements and ignores others, thereby returning a list that is longer or shorter than the input list.

For example, the following program defines ~SQRT-LIST~, which takes a list of positive and negative numbers and returns a list of the square roots of the non-negative elements of the list *(!)*.

#+name: fig-1-7
#+begin_src lisp
              (DEFUN SQRT-LIST (L)
                (COND ((NULL L) NIL)
                      ((< (CAR L) 0) (SQRT-LIST (CDR L)))
                      ((EQUAL (CAR L) 0)
                       (CONS 0 (SQRT-LIST (CDR L))))
                      (T (CONS (SQRT (CAR L))
                               (CONS (- (SQRT (CAR L)))
                                     (SQRT-LIST (CDR L))))))))
#+end_src

#+RESULTS: fig-1-7
: SQRT-LIST

This function has one test for the empty list, and three COND-clauses for the recursive part of the list definition. If the ~CAR~ of ~L~ is less than zero, we skip over it by just taking ~SQRT-LIST~ of the ~CDR~. If it's zero exactly, we ~CONS~ a zero onto the remaining square roots. If it's positive, we have to include both the positive and negative roots. Thus one input list element can lead to zero, one, or two output elements *(!)*.

For example,

#+begin_src lisp
(SQRT-LIST '(-9 0 4 -25))
#+end_src

#+RESULTS:
| 0 | 2.0 | -2.0 |

As an example of another list-building function, we shall define the function ~REVERSE~. (REVERSE /list/) returns a list of the elements of /list/ backwards. It already exists in Lisp but it is instructive to define it ourselves. Here is one way of defining the function.

#+name: fig-1-8
#+begin_src lisp
  (DEFUN REVERSE (L)
    (LET ((RESULT NIL))
      (LOOP (IF (NULL L) (RETURN RESULT))
            (SETQ RESULT (CONS (CAR L) RESULT))
            (SETQ L (CDR L)))))
#+end_src

Notice how in an iterative loop, the function ~CONS~ naturally builds a list backwards *(!)*.

Notice also that ~REVERSE~ binds values to symbols in three different ways.

  1. First, ~L~ is the formal variable of the function and is bound to whatever list ~REVERSE~ is applied to.
  2. Second, ~RESULT~ is the local variable of the ~LET~ and is bound to ~NIL~ initially.
  3. Third, during the loop both ~RESULT~ and ~L~ are explicitly assigned new values with the reserved word ~SETQ~.

Both ~L~ and ~RESULT~ are local to the function ~REVERSE~. That is, they are unaffected *(!)* by the values of ~L~ and ~RESULT~ in any other function or expression, nor do they affect such values. It is a matter of good programming practice to make sure that all variables used in a function are local *(!)*, if at all possible, in order to avoid unexpected interferences between functions.

** Mapping Functions

The control structure of ~SQUARE-LIST~ is so common that Lisp provides facilities for doing it more directly. We do this with the function ~MAPCAR~.

#+begin_src lisp
  (DEFUN SQUARE-LIST (L)
    (MAPCAR (FUNCTION SQUARE) L))
#+end_src

~FUNCTION~ is a reserved word. It's very similar to ~QUOTE~, but we use it whenever we specifically want to refer to a Lisp function, as opposed to a symbol or other S-expression *(!)*. So far, we've seen function-names used in /function definitions/, i.e., DEFUN-forms, and in /function calls/, where the function-name is the ~CAR~ of a list that is being evaluated. But this is the first time we've seen a function-name passed as an argument *(!)*.

Since ~FUNCTION~ is so common, Lisp uses a special notation for it. An expression written as #'/exp/ is transformed by the function ~READ~ into (FUNCTION /exp/). So we could rewrite the definition of ~SQUARE-LIST~ this way:

#+begin_src lisp
  (DEFUN SQUARE-LIST (L)
    (MAPCAR #'SQUARE L))
#+end_src

~MAPCAR~ is a /mapping/ function. In its simplest form, it takes two arguments, a function and a list, and returns a new list consisting of the values of the function applied to the elements of the original list.

#+begin_example
(MAPCAR #'SQUARE '(3 -2 12 4))
   = (LIST (SQUARE 3)
           (SQUARE -2)
           (SQUARE 12)
           (SQUARE 4))
   \Rightarrow (9 4 144 16)
#+end_example

~MAPCAR~ could be defined as follows.

#+name: fig-1-9
#+begin_src lisp
      (DEFUN MAPCAR (F L)
        (COND ((NULL L) NIL)
              (T (CONS (FUNCALL F (CAR L))
                       (MAPCAR F (CDR L))))))
#+end_src

~FUNCALL~ is a function that takes an arbitrary number of arguments. The first one should evaluate to a function. ~FUNCALL~ calls that function, passing it to the values of the rest of FUNCALL's arguments. For example,

#+begin_example
(FUNCALL (CAR (LIST #'CONS #'APPEND #'FOO))
         'A NIL)
   = (CONS 'A NIL)
   \Rightarrow (A)
#+end_example

In general, (FUNCALL /function {expression}*/) = (/value-of-function/ {expression}*).

There are other mapping functions:

  - ~MAPC~,
  - ~MAPCAN~,
  - ~EVERY~, and
  - ~SOME~.

In Common Lisp, ~MAPCAR~, ~MAPCAN~, and ~MAPC~ actually can take more than two (2) arguments. The first one /must/ be a function. The rest are all lists. If that function takes 2 arguments, for example, then you would call ~MAPCAR~ with the name of the function and 2 lists. For example,

#+begin_example
(MAPCAR #'CONS '(A B C) '(X Y Z))
   = (LIST (CONS 'A 'X)
           (CONS 'B 'Y)
           (CONS 'C 'Z))
   \Rightarrow ((A . X) (B . Y) (C . Z))
#+end_example

** Lambda Expressions

Suppose that we want to take a list of numbers and produce a new list of the same length, consisting of the symbols ~POS~, ~NEG~, or ~ZERO~, such that ~POS~ appears in the positions corresponding to positive numbers, ~NEG~ in those for negative numbers, and ~ZERO~ for the zeros. The code in the following snippet would do this.

#+name: fig-1-10
#+begin_src lisp
      (MAPCAR #'SYM-SIGN L)

      (DEFUN SYM-SIGN (N)
        (COND ((< N 0) 'NEG)
              ((EQUAL N 0) 'ZERO)
              ((> N 0) 'POS)))
#+end_src

However, the function ~SYM-SIGN~ will probably never be used anywhere else. It would be more reasonable if we could write the code for it /directly/ in the ~MAPCAR~ expression, without having to make up a name. In fact, we can do this *(!)*.

#+name: fig-1-11
#+begin_src lisp
        (MAPCAR #'(LAMBDA (N)
                    (COND ((< N 0) 'NEG)
                          ((EQUAL n 0) 'ZERO)
                          ((> N 0) 'POS)))
                L)
#+end_src

The general construct, called a /functional constant/ or ~LAMBDA~ expression is (LAMBDA ({/symbol/}*) {/expression/}*).

It is a function without a name. When called, it is evaluted just like a function, by first binding the symbols (i.e., the local variables) to the arguments, and then evaluating the expressions in the body of the ~LAMBDA~.

This may seem strange at first, because in most programming languages, all functions have to have names. In Lisp, however, a function can be created and used without ever giving it a name, in much the same way as expressions can.
